import osimport common.SecondEvents# coding:utf-8from selenium.webdriver.support.wait import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver.common.by import Byfrom selenium import webdriverimport sysimport pytestfrom ReadCase import get_casefrom common.Optiontype import OptionTypefrom cf.config import driver_pathimport allure@allure.feature(sys.argv[1])class TestClass(object):    params = "ID,TYPE,DEPENDENCY,PRECONDITION,DESCRIPTION,OPERATION,ELEMENT,CHECKPOINT,CHECKELEMENT,EXPECT_VALUE,RESULT"    case = get_case(sys.argv[1])    def setup_class(self):        self.driver = webdriver.Chrome(driver_path)        self.runtest = common.SecondEvents.SecondEVENTS(self.driver, 'https://test.uwa4d.com/', 'UWA - 简单优化、优化简单')        self.runtest.open()        # self.runtest.clear()        self.resultdict = {}    def setup(self):        self.id = ''        self.checkpoint = False    def teardown(self):        self.resultdict[self.id] = self.checkpoint    def teardown_class(self):        self.driver.quit()    @pytest.mark.parametrize(params, case)    def test_run(self, ID, TYPE, DEPENDENCY, PRECONDITION, DESCRIPTION, OPERATION, ELEMENT, CHECKPOINT, CHECKELEMENT,EXPECT_VALUE,RESULT):        self.id = ID        if DEPENDENCY != 0 and self.resultdict[DEPENDENCY] == False and len(self.resultdict) > 0:            pytest.skip("ID: %s为False，跳过测试" % DEPENDENCY)        for i, v in zip(eval(OPERATION), eval(ELEMENT)):            if TYPE == OptionType.findelement.value:                _dostatements = 'self.runtest.' + i + "(v)"                all_handles_0=self.driver.current_window_handle                #记录当前句柄                eval(_dostatements)                all_handles_1=self.driver.window_handles                #记录操作后的所有句柄                self.runtest.get_browser_log()                if all_handles_0 != all_handles_1:                    self.driver.switch_to.window(all_handles_1[-1])                #如果有新窗口打开则跳到新窗口句柄            elif TYPE == OptionType.optiondriver.value:                _dostatements = "self.driver." + i + "()"                eval(_dostatements)        try:            if CHECKPOINT == 'get_title':                assert self.runtest.get_title() == EXPECT_VALUE                # self.checkpoint = True if _hl == CHECKELEMENT else False                self.checkpoint = True            elif CHECKPOINT == 'get_url':                assert self.runtest.get_url() == EXPECT_VALUE                self.checkpoint = True            elif CHECKPOINT == 'get_text':                assert self.runtest.get_text(*eval(CHECKELEMENT))==EXPECT_VALUE                self.checkpoint = True            elif CHECKPOINT == 'is_displayed':                assert self.runtest.is_displayed(*eval(CHECKELEMENT))                self.checkpoint = True            elif CHECKPOINT == 'get_attr':                assert self.runtest.get_attr(*eval(CHECKELEMENT)) == EXPECT_VALUE                self.checkpoint =True            elif CHECKPOINT == 'element_counts':                assert self.runtest.element_counts(*eval(CHECKELEMENT)) == EXPECT_VALUE                self.checkpoint=True            elif CHECKPOINT =='get_video_url':                assert self.runtest.get_video_url(*eval(CHECKELEMENT))==EXPECT_VALUE                self.checkpoint = True            elif CHECKPOINT=='get_size':                assert self.runtest.get_size(*eval(CHECKELEMENT))==EXPECT_VALUE        except:            self.checkpoint = False            self.runtest.mylog.error('未通过 ===> 测试用例编号：%d, 测试用例条目：%s' % (ID, DESCRIPTION))            self.runtest.img_screenshot(DESCRIPTION)            pytest.fail(msg='%s undefind' % CHECKELEMENT, pytrace=True)        # self.runtest.mylog.info('===>：%s' % self.checkpoint)if __name__ == '__main__':    pytest.main(["-s", "testrun.py", "--maxfail=3", "--alluredir=./data"])