{
  "uid" : "c2992c7cbcc459fe",
  "name" : "test_run[19-1-18-用户设置界面-点击返回-[\"back\"]-[\"none\"]-get_url-[\"none\"]-https://test.uwa4d.com/u/pipeline/overview?project=6746&type=7-None]",
  "fullName" : "testrun.TestClass#test_run[19-1-18-用户设置界面-点击返回-[\"back\"]-[\"none\"]-get_url-",
  "historyId" : "e8d047e03c4562bca25cac9dec258743",
  "time" : {
    "start" : 1591265141493,
    "stop" : 1591265143374,
    "duration" : 1881
  },
  "status" : "failed",
  "statusMessage" : "Failed: [\"none\"] undefind",
  "statusTrace" : "self = <testrun.TestClass object at 0x000001444F763580>, ID = 19, TYPE = 1\nDEPENDENCY = 18, PRECONDITION = '用户设置界面', DESCRIPTION = '点击返回'\nOPERATION = '[\"back\"]', ELEMENT = '[\"none\"]', CHECKPOINT = 'get_url'\nCHECKELEMENT = '[\"none\"]'\nEXPECT_VALUE = 'https://test.uwa4d.com/u/pipeline/overview?project=6746&type=7'\nRESULT = None\n\n    @pytest.mark.parametrize(params, case)\n    def test_run(self, ID, TYPE, DEPENDENCY, PRECONDITION, DESCRIPTION, OPERATION, ELEMENT, CHECKPOINT, CHECKELEMENT,EXPECT_VALUE,RESULT):\n    \n        self.id = ID\n    \n        if DEPENDENCY != 0 and self.resultdict[DEPENDENCY] == False and len(self.resultdict) > 0:\n            pytest.skip(\"ID: %s为False，跳过测试\" % DEPENDENCY)\n    \n        for i, v in zip(eval(OPERATION), eval(ELEMENT)):\n            if TYPE == OptionType.findelement.value:\n                _dostatements = 'self.runtest.' + i + \"(v)\"\n                all_handles_0=self.driver.current_window_handle\n                #记录当前句柄\n                eval(_dostatements)\n                all_handles_1=self.driver.window_handles\n                #记录操作后的所有句柄\n                self.runtest.get_browser_log()\n                if all_handles_0 != all_handles_1:\n                    self.driver.switch_to.window(all_handles_1[-1])\n                #如果有新窗口打开则跳到新窗口句柄\n    \n            elif TYPE == OptionType.optiondriver.value:\n                _dostatements = \"self.driver.\" + i + \"()\"\n                eval(_dostatements)\n    \n        try:\n            if CHECKPOINT == 'get_title':\n                assert self.runtest.get_title() == EXPECT_VALUE\n                # self.checkpoint = True if _hl == CHECKELEMENT else False\n                self.checkpoint = True\n            elif CHECKPOINT == 'get_url':\n>               assert self.runtest.get_url() == EXPECT_VALUE\nE               AssertionError: assert None == 'https://test.uwa4d.com/u/pipeline/overview?project=6746&type=7'\nE                +  where None = <bound method EVENTS.get_url of <common.SecondEvents.SecondEVENTS object at 0x000001444F6C2DC0>>()\nE                +    where <bound method EVENTS.get_url of <common.SecondEvents.SecondEVENTS object at 0x000001444F6C2DC0>> = <common.SecondEvents.SecondEVENTS object at 0x000001444F6C2DC0>.get_url\nE                +      where <common.SecondEvents.SecondEVENTS object at 0x000001444F6C2DC0> = <testrun.TestClass object at 0x000001444F763580>.runtest\n\ntestrun.py:72: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testrun.TestClass object at 0x000001444F763580>, ID = 19, TYPE = 1\nDEPENDENCY = 18, PRECONDITION = '用户设置界面', DESCRIPTION = '点击返回'\nOPERATION = '[\"back\"]', ELEMENT = '[\"none\"]', CHECKPOINT = 'get_url'\nCHECKELEMENT = '[\"none\"]'\nEXPECT_VALUE = 'https://test.uwa4d.com/u/pipeline/overview?project=6746&type=7'\nRESULT = None\n\n    @pytest.mark.parametrize(params, case)\n    def test_run(self, ID, TYPE, DEPENDENCY, PRECONDITION, DESCRIPTION, OPERATION, ELEMENT, CHECKPOINT, CHECKELEMENT,EXPECT_VALUE,RESULT):\n    \n        self.id = ID\n    \n        if DEPENDENCY != 0 and self.resultdict[DEPENDENCY] == False and len(self.resultdict) > 0:\n            pytest.skip(\"ID: %s为False，跳过测试\" % DEPENDENCY)\n    \n        for i, v in zip(eval(OPERATION), eval(ELEMENT)):\n            if TYPE == OptionType.findelement.value:\n                _dostatements = 'self.runtest.' + i + \"(v)\"\n                all_handles_0=self.driver.current_window_handle\n                #记录当前句柄\n                eval(_dostatements)\n                all_handles_1=self.driver.window_handles\n                #记录操作后的所有句柄\n                self.runtest.get_browser_log()\n                if all_handles_0 != all_handles_1:\n                    self.driver.switch_to.window(all_handles_1[-1])\n                #如果有新窗口打开则跳到新窗口句柄\n    \n            elif TYPE == OptionType.optiondriver.value:\n                _dostatements = \"self.driver.\" + i + \"()\"\n                eval(_dostatements)\n    \n        try:\n            if CHECKPOINT == 'get_title':\n                assert self.runtest.get_title() == EXPECT_VALUE\n                # self.checkpoint = True if _hl == CHECKELEMENT else False\n                self.checkpoint = True\n            elif CHECKPOINT == 'get_url':\n                assert self.runtest.get_url() == EXPECT_VALUE\n                self.checkpoint = True\n            elif CHECKPOINT == 'get_text':\n                assert self.runtest.get_text(*eval(CHECKELEMENT))==EXPECT_VALUE\n                self.checkpoint = True\n            elif CHECKPOINT == 'is_displayed':\n                assert self.runtest.is_displayed(*eval(CHECKELEMENT))\n                self.checkpoint = True\n            elif CHECKPOINT == 'get_attr':\n                assert self.runtest.get_attr(*eval(CHECKELEMENT)) == EXPECT_VALUE\n                self.checkpoint =True\n            elif CHECKPOINT == 'element_counts':\n                assert self.runtest.element_counts(*eval(CHECKELEMENT)) == EXPECT_VALUE\n                self.checkpoint=True\n            elif CHECKPOINT =='get_video_url':\n                assert self.runtest.get_video_url(*eval(CHECKELEMENT))==EXPECT_VALUE\n                self.checkpoint = True\n            elif CHECKPOINT=='get_size':\n                assert self.runtest.get_size(*eval(CHECKELEMENT))==EXPECT_VALUE\n    \n    \n    \n        except:\n    \n            self.checkpoint = False\n            self.runtest.mylog.error('未通过 ===> 测试用例编号：%d, 测试用例条目：%s' % (ID, DESCRIPTION))\n            self.runtest.img_screenshot(DESCRIPTION)\n>           pytest.fail(msg='%s undefind' % CHECKELEMENT, pytrace=True)\nE           Failed: [\"none\"] undefind\n\ntestrun.py:99: Failed",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "Failed: [\"none\"] undefind",
    "statusTrace" : "self = <testrun.TestClass object at 0x000001444F763580>, ID = 19, TYPE = 1\nDEPENDENCY = 18, PRECONDITION = '用户设置界面', DESCRIPTION = '点击返回'\nOPERATION = '[\"back\"]', ELEMENT = '[\"none\"]', CHECKPOINT = 'get_url'\nCHECKELEMENT = '[\"none\"]'\nEXPECT_VALUE = 'https://test.uwa4d.com/u/pipeline/overview?project=6746&type=7'\nRESULT = None\n\n    @pytest.mark.parametrize(params, case)\n    def test_run(self, ID, TYPE, DEPENDENCY, PRECONDITION, DESCRIPTION, OPERATION, ELEMENT, CHECKPOINT, CHECKELEMENT,EXPECT_VALUE,RESULT):\n    \n        self.id = ID\n    \n        if DEPENDENCY != 0 and self.resultdict[DEPENDENCY] == False and len(self.resultdict) > 0:\n            pytest.skip(\"ID: %s为False，跳过测试\" % DEPENDENCY)\n    \n        for i, v in zip(eval(OPERATION), eval(ELEMENT)):\n            if TYPE == OptionType.findelement.value:\n                _dostatements = 'self.runtest.' + i + \"(v)\"\n                all_handles_0=self.driver.current_window_handle\n                #记录当前句柄\n                eval(_dostatements)\n                all_handles_1=self.driver.window_handles\n                #记录操作后的所有句柄\n                self.runtest.get_browser_log()\n                if all_handles_0 != all_handles_1:\n                    self.driver.switch_to.window(all_handles_1[-1])\n                #如果有新窗口打开则跳到新窗口句柄\n    \n            elif TYPE == OptionType.optiondriver.value:\n                _dostatements = \"self.driver.\" + i + \"()\"\n                eval(_dostatements)\n    \n        try:\n            if CHECKPOINT == 'get_title':\n                assert self.runtest.get_title() == EXPECT_VALUE\n                # self.checkpoint = True if _hl == CHECKELEMENT else False\n                self.checkpoint = True\n            elif CHECKPOINT == 'get_url':\n>               assert self.runtest.get_url() == EXPECT_VALUE\nE               AssertionError: assert None == 'https://test.uwa4d.com/u/pipeline/overview?project=6746&type=7'\nE                +  where None = <bound method EVENTS.get_url of <common.SecondEvents.SecondEVENTS object at 0x000001444F6C2DC0>>()\nE                +    where <bound method EVENTS.get_url of <common.SecondEvents.SecondEVENTS object at 0x000001444F6C2DC0>> = <common.SecondEvents.SecondEVENTS object at 0x000001444F6C2DC0>.get_url\nE                +      where <common.SecondEvents.SecondEVENTS object at 0x000001444F6C2DC0> = <testrun.TestClass object at 0x000001444F763580>.runtest\n\ntestrun.py:72: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testrun.TestClass object at 0x000001444F763580>, ID = 19, TYPE = 1\nDEPENDENCY = 18, PRECONDITION = '用户设置界面', DESCRIPTION = '点击返回'\nOPERATION = '[\"back\"]', ELEMENT = '[\"none\"]', CHECKPOINT = 'get_url'\nCHECKELEMENT = '[\"none\"]'\nEXPECT_VALUE = 'https://test.uwa4d.com/u/pipeline/overview?project=6746&type=7'\nRESULT = None\n\n    @pytest.mark.parametrize(params, case)\n    def test_run(self, ID, TYPE, DEPENDENCY, PRECONDITION, DESCRIPTION, OPERATION, ELEMENT, CHECKPOINT, CHECKELEMENT,EXPECT_VALUE,RESULT):\n    \n        self.id = ID\n    \n        if DEPENDENCY != 0 and self.resultdict[DEPENDENCY] == False and len(self.resultdict) > 0:\n            pytest.skip(\"ID: %s为False，跳过测试\" % DEPENDENCY)\n    \n        for i, v in zip(eval(OPERATION), eval(ELEMENT)):\n            if TYPE == OptionType.findelement.value:\n                _dostatements = 'self.runtest.' + i + \"(v)\"\n                all_handles_0=self.driver.current_window_handle\n                #记录当前句柄\n                eval(_dostatements)\n                all_handles_1=self.driver.window_handles\n                #记录操作后的所有句柄\n                self.runtest.get_browser_log()\n                if all_handles_0 != all_handles_1:\n                    self.driver.switch_to.window(all_handles_1[-1])\n                #如果有新窗口打开则跳到新窗口句柄\n    \n            elif TYPE == OptionType.optiondriver.value:\n                _dostatements = \"self.driver.\" + i + \"()\"\n                eval(_dostatements)\n    \n        try:\n            if CHECKPOINT == 'get_title':\n                assert self.runtest.get_title() == EXPECT_VALUE\n                # self.checkpoint = True if _hl == CHECKELEMENT else False\n                self.checkpoint = True\n            elif CHECKPOINT == 'get_url':\n                assert self.runtest.get_url() == EXPECT_VALUE\n                self.checkpoint = True\n            elif CHECKPOINT == 'get_text':\n                assert self.runtest.get_text(*eval(CHECKELEMENT))==EXPECT_VALUE\n                self.checkpoint = True\n            elif CHECKPOINT == 'is_displayed':\n                assert self.runtest.is_displayed(*eval(CHECKELEMENT))\n                self.checkpoint = True\n            elif CHECKPOINT == 'get_attr':\n                assert self.runtest.get_attr(*eval(CHECKELEMENT)) == EXPECT_VALUE\n                self.checkpoint =True\n            elif CHECKPOINT == 'element_counts':\n                assert self.runtest.element_counts(*eval(CHECKELEMENT)) == EXPECT_VALUE\n                self.checkpoint=True\n            elif CHECKPOINT =='get_video_url':\n                assert self.runtest.get_video_url(*eval(CHECKELEMENT))==EXPECT_VALUE\n                self.checkpoint = True\n            elif CHECKPOINT=='get_size':\n                assert self.runtest.get_size(*eval(CHECKELEMENT))==EXPECT_VALUE\n    \n    \n    \n        except:\n    \n            self.checkpoint = False\n            self.runtest.mylog.error('未通过 ===> 测试用例编号：%d, 测试用例条目：%s' % (ID, DESCRIPTION))\n            self.runtest.img_screenshot(DESCRIPTION)\n>           pytest.fail(msg='%s undefind' % CHECKELEMENT, pytrace=True)\nE           Failed: [\"none\"] undefind\n\ntestrun.py:99: Failed",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "516bd30fd404c2a2",
      "name" : "log",
      "source" : "516bd30fd404c2a2.txt",
      "type" : "text/plain",
      "size" : 149
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "UwaTestCase_00_pipeline1.xlsx"
  }, {
    "name" : "suite",
    "value" : "testrun"
  }, {
    "name" : "subSuite",
    "value" : "TestClass"
  }, {
    "name" : "host",
    "value" : "DESKTOP-N6F5SUG"
  }, {
    "name" : "thread",
    "value" : "10724-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "testrun"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "CHECKELEMENT",
    "value" : "'[\"none\"]'"
  }, {
    "name" : "CHECKPOINT",
    "value" : "'get_url'"
  }, {
    "name" : "DEPENDENCY",
    "value" : "18"
  }, {
    "name" : "DESCRIPTION",
    "value" : "'点击返回'"
  }, {
    "name" : "ELEMENT",
    "value" : "'[\"none\"]'"
  }, {
    "name" : "EXPECT_VALUE",
    "value" : "'https://test.uwa4d.com/u/pipeline/overview?project=6746&type=7'"
  }, {
    "name" : "ID",
    "value" : "19"
  }, {
    "name" : "OPERATION",
    "value" : "'[\"back\"]'"
  }, {
    "name" : "PRECONDITION",
    "value" : "'用户设置界面'"
  }, {
    "name" : "RESULT",
    "value" : "None"
  }, {
    "name" : "TYPE",
    "value" : "1"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ {
      "uid" : "f3e458975a4e7f4e",
      "status" : "passed",
      "time" : {
        "start" : 1588754164967,
        "stop" : 1588754166726,
        "duration" : 1759
      }
    } ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "c2992c7cbcc459fe.json",
  "parameterValues" : [ "'[\"none\"]'", "'get_url'", "18", "'点击返回'", "'[\"none\"]'", "'https://test.uwa4d.com/u/pipeline/overview?project=6746&type=7'", "19", "'[\"back\"]'", "'用户设置界面'", "None", "1" ]
}